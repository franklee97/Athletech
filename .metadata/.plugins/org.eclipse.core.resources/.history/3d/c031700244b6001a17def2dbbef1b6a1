/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under Ultimate Liberty license
 * SLA0044, the "License"; You may not use this file except in compliance with
 * the License. You may obtain a copy of the License at:
 *                             www.st.com/SLA0044
 *
 ******************************************************************************
 */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "usbd_cdc_if.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
typedef enum {
	ACCELERO_SENSORS_AUTO = -1, /* Always first element and equal to -1 */
	LSM6DSM_X_0, /* . */
	LSM303AGR_X_0 /* . */
} ACCELERO_ID_t;
typedef enum {
	COMPONENT_OK = 0,
	COMPONENT_ERROR,
	COMPONENT_TIMEOUT,
	COMPONENT_NOT_IMPLEMENTED
} DrvStatusTypeDef;

/**
 * @brief  Sensor axes raw data structure definition
 */
typedef struct {
	int16_t AXIS_X;
	int16_t AXIS_Y;
	int16_t AXIS_Z;
} SensorAxesRaw_t;

/**
 * @brief  Sensor axes data structure definition
 */
typedef struct {
	int32_t AXIS_X;
	int32_t AXIS_Y;
	int32_t AXIS_Z;
} SensorAxes_t;

/**
 * @brief  Component's Context structure definition.
 */
typedef struct {

	/* Identity */
	uint8_t who_am_i;

	/* Configuration */
	uint8_t ifType; /* 0 means I2C, 1 means SPI, etc. */
	uint8_t address; /* Sensor I2C address (NOTE: Not a unique sensor ID). */
	uint8_t spiDevice; /* Sensor Chip Select for SPI Bus */
	uint8_t instance; /* Sensor instance (NOTE: Sensor ID unique only within its class). */
	uint8_t isInitialized; /* Sensor setup done. */
	uint8_t isEnabled; /* Sensor ON. */
	uint8_t isCombo; /* Combo sensor (component consists of more sensors). */

	/* Pointer to the Data */
	void *pData;

	/* Pointer to the Virtual Table */
	void *pVTable;
	/* Pointer to the Extended Virtual Table */
	void *pExtVTable;
} DrvContextTypeDef;

/**
 * @brief  ACCELEROMETER driver structure definition
 */
typedef struct {
	DrvStatusTypeDef (*Init)(DrvContextTypeDef*);
	DrvStatusTypeDef (*DeInit)(DrvContextTypeDef*);
	DrvStatusTypeDef (*Sensor_Enable)(DrvContextTypeDef*);
	DrvStatusTypeDef (*Sensor_Disable)(DrvContextTypeDef*);
	DrvStatusTypeDef (*Get_WhoAmI)(DrvContextTypeDef*, uint8_t*);
	DrvStatusTypeDef (*Check_WhoAmI)(DrvContextTypeDef*);
	DrvStatusTypeDef (*Get_Axes)(DrvContextTypeDef*, SensorAxes_t*);
	DrvStatusTypeDef (*Get_AxesRaw)(DrvContextTypeDef*, SensorAxesRaw_t*);
	DrvStatusTypeDef (*Get_Sensitivity)(DrvContextTypeDef*, float*);
	DrvStatusTypeDef (*Get_ODR)(DrvContextTypeDef*, float*);
	DrvStatusTypeDef (*Set_ODR)(DrvContextTypeDef*, SensorOdr_t);
	DrvStatusTypeDef (*Set_ODR_Value)(DrvContextTypeDef*, float);
	DrvStatusTypeDef (*Get_FS)(DrvContextTypeDef*, float*);
	DrvStatusTypeDef (*Set_FS)(DrvContextTypeDef*, SensorFs_t);
	DrvStatusTypeDef (*Set_FS_Value)(DrvContextTypeDef*, float);
	DrvStatusTypeDef (*Get_Axes_Status)(DrvContextTypeDef*, uint8_t*);
	DrvStatusTypeDef (*Set_Axes_Status)(DrvContextTypeDef*, uint8_t*);
	DrvStatusTypeDef (*Read_Reg)(DrvContextTypeDef*, uint8_t, uint8_t*);
	DrvStatusTypeDef (*Write_Reg)(DrvContextTypeDef*, uint8_t, uint8_t);
	DrvStatusTypeDef (*Get_DRDY_Status)(DrvContextTypeDef*, uint8_t*);
} ACCELERO_Drv_t;

/**
 * @brief  Component's Context structure definition.
 */
typedef struct {

	/* Identity */
	uint8_t who_am_i;

	/* Configuration */
	uint8_t ifType; /* 0 means I2C, 1 means SPI, etc. */
	uint8_t address; /* Sensor I2C address (NOTE: Not a unique sensor ID). */
	uint8_t spiDevice; /* Sensor Chip Select for SPI Bus */
	uint8_t instance; /* Sensor instance (NOTE: Sensor ID unique only within its class). */
	uint8_t isInitialized; /* Sensor setup done. */
	uint8_t isEnabled; /* Sensor ON. */
	uint8_t isCombo; /* Combo sensor (component consists of more sensors). */

	/* Pointer to the Data */
	void *pData;

	/* Pointer to the Virtual Table */
	void *pVTable;
	/* Pointer to the Extended Virtual Table */
	void *pExtVTable;
} DrvContextTypeDef;

typedef enum {
//  TEMPERATURE_SENSORS_AUTO = -1, /* Always first element and equal to -1 */
	LSM6DSM = 0, /* LSM6DSM. */
	LSM303AGR_X, /* LSM303AGR Accelerometer */
	LSM303AGR_M, /* LSM303AGR Magnetometer */
	LPS22HB /* LPS22HB */
} SPI_Device_t;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define LSM6DSM_ACC_GYRO_WHO_AM_I         0x6A
#define LSM6DSM_ACC_GYRO_I2C_ADDRESS_HIGH  0xD6  // SAD[0] = 1

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi2;
static DrvContextTypeDef ACCELERO_SensorHandle[2];
/* USER CODE BEGIN PV */
static void *LSM6DSM_X_0_handle = NULL;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI2_Init(void);
DrvStatusTypeDef BSP_ACCELERO_Init(ACCELERO_ID_t id, void **handle);
static DrvStatusTypeDef BSP_LSM6DSM_ACCELERO_Init(void **handle);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
	/* USER CODE BEGIN 1 */

	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();

	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();

	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
	MX_SPI2_Init();
	MX_USB_DEVICE_Init();
	/* USER CODE BEGIN 2 */
	if (BSP_ACCELERO_Init(LSM6DSM_X_0, &LSM6DSM_X_0_handle) != COMPONENT_OK) {
		while (1)
			;
	}
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
//		CDC_Transmit_FS((uint8_t*) "Hello World\r\n", 13);
		/* USER CODE BEGIN 3 */
	}
	/* USER CODE END 3 */
}

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
	RCC_OscInitStruct.MSICalibrationValue = 0;
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
	RCC_OscInitStruct.PLL.PLLM = 1;
	RCC_OscInitStruct.PLL.PLLN = 40;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
		Error_Handler();
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
		Error_Handler();
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
	PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
		Error_Handler();
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
			!= HAL_OK) {
		Error_Handler();
	}
}

/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {

	/* USER CODE BEGIN SPI2_Init 0 */

	/* USER CODE END SPI2_Init 0 */

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
	hspi2.Init.Mode = SPI_MODE_MASTER;
	hspi2.Init.Direction = SPI_DIRECTION_1LINE;
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
	hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
	hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
	hspi2.Init.NSS = SPI_NSS_SOFT;
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
	hspi2.Init.CRCPolynomial = 7;
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
		Error_Handler();
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}

/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE()
	;
	__HAL_RCC_GPIOH_CLK_ENABLE()
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
	;

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);

	/*Configure GPIO pin : PB12 */
	GPIO_InitStruct.Pin = GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
/**
 * @brief Initialize an accelerometer sensor
 * @param id the accelerometer sensor identifier
 * @param handle the device handle
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
DrvStatusTypeDef BSP_ACCELERO_Init(ACCELERO_ID_t id, void **handle) {

	*handle = NULL;

	switch (id) {
	case LSM6DSM_X_0: {
		if (BSP_LSM6DSM_ACCELERO_Init(handle) == COMPONENT_ERROR) {
			return COMPONENT_ERROR;
		}
		break;
	}
	}

	return COMPONENT_OK;
}

static DrvStatusTypeDef BSP_LSM6DSM_ACCELERO_Init(void **handle) {
	ACCELERO_Drv_t *driver = NULL;
	uint8_t data = 0x0C;

	if (ACCELERO_SensorHandle[LSM6DSM_X_0].isInitialized == 1) {
		/* We have reached the max num of instance for this component */
		return COMPONENT_ERROR;
	}

	if (Sensor_IO_SPI_Init() == COMPONENT_ERROR) {
		return COMPONENT_ERROR;
	}

	/* Setup sensor handle. */
	ACCELERO_SensorHandle[LSM6DSM_X_0].who_am_i = LSM6DSM_ACC_GYRO_WHO_AM_I;
	ACCELERO_SensorHandle[LSM6DSM_X_0].ifType = 1; // SPI interface
	ACCELERO_SensorHandle[LSM6DSM_X_0].address =
	LSM6DSM_ACC_GYRO_I2C_ADDRESS_HIGH;
	ACCELERO_SensorHandle[LSM6DSM_X_0].spiDevice = LSM6DSM;
	ACCELERO_SensorHandle[LSM6DSM_X_0].instance = LSM6DSM_X_0;
	ACCELERO_SensorHandle[LSM6DSM_X_0].isInitialized = 0;
	ACCELERO_SensorHandle[LSM6DSM_X_0].isEnabled = 0;
	ACCELERO_SensorHandle[LSM6DSM_X_0].isCombo = 1;
	ACCELERO_SensorHandle[LSM6DSM_X_0].pData =
			(void *) &ACCELERO_Data[LSM6DSM_X_0];
	ACCELERO_SensorHandle[LSM6DSM_X_0].pVTable = (void *) &LSM6DSM_X_Drv;
	ACCELERO_SensorHandle[LSM6DSM_X_0].pExtVTable = (void *) &LSM6DSM_X_ExtDrv;

	LSM6DSM_X_0_Data.comboData = &LSM6DSM_Combo_Data[0];
	ACCELERO_Data[LSM6DSM_X_0].pComponentData = (void *) &LSM6DSM_X_0_Data;
	ACCELERO_Data[LSM6DSM_X_0].pExtData = 0;

	*handle = (void *) &ACCELERO_SensorHandle[LSM6DSM_X_0];

	Sensor_IO_SPI_CS_Init(*handle);

	if (LSM6DSM_Combo_Data[0].isGyroInitialized == 0) {
		// SPI Serial Interface Mode selection --> 3Wires
		if (Sensor_IO_Write(*handle, LSM6DSM_ACC_GYRO_CTRL3_C, &data, 1)) {
			return COMPONENT_ERROR;
		}
	}

	driver = (ACCELERO_Drv_t *) ((DrvContextTypeDef *) (*handle))->pVTable;

	if (driver->Init == NULL) {
		memset((*handle), 0, sizeof(DrvContextTypeDef));
		*handle = NULL;
		return COMPONENT_ERROR;
	}

	if (driver->Init((DrvContextTypeDef *) (*handle)) == COMPONENT_ERROR) {
		memset((*handle), 0, sizeof(DrvContextTypeDef));
		*handle = NULL;
		return COMPONENT_ERROR;
	}

	/* Disable I2C interface */
	if (LSM6DSM_ACC_GYRO_W_I2C_DISABLE(*handle,
			LSM6DSM_ACC_GYRO_I2C_DISABLE_SPI_ONLY) == MEMS_ERROR) {
		return COMPONENT_ERROR;
	}

	/* Configure interrupt lines for LSM6DSM */
	LSM6DSM_Sensor_IO_ITConfig();

	return COMPONENT_OK;
}
/* USER CODE END 4 */

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
